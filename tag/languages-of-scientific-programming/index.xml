<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Languages of scientific programming | Academic</title>
    <link>https://example.com/tag/languages-of-scientific-programming/</link>
      <atom:link href="https://example.com/tag/languages-of-scientific-programming/index.xml" rel="self" type="application/rss+xml" />
    <description>Languages of scientific programming</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 13 May 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Languages of scientific programming</title>
      <link>https://example.com/tag/languages-of-scientific-programming/</link>
    </image>
    
    <item>
      <title>Languages of scientific programming</title>
      <link>https://example.com/post/languages-of-scientific-programming/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/languages-of-scientific-programming/</guid>
      <description>&lt;h2 id=&#34;main-scientific-programming-languages&#34;&gt;Main scientific programming languages&lt;/h2&gt;
&lt;p&gt;Usually scientists write computational code in C++, and then turn it into Python code. This approach is outdated: it is very difficult to maintain a large code base in Python, and here the size of projects grows on the side of code users - scientists. That is why such systems are falling apart, and for the last five years engineers and scientists have been looking for more flexible and simpler alternatives.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;other-scientific-programming-languages&#34;&gt;Other scientific programming languages&lt;/h2&gt;
&lt;p&gt;In addition to Python, various fields of science write or have tried to write in other languages.&lt;/p&gt;
&lt;p&gt;R. It is used in statistics. It&amp;rsquo;s a highly specialized language that&amp;rsquo;s great for statistical problems. But often we not only need to get the data but we need to make a web service so that the user has access to this data. Writing it in R is not an easy task.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Julia. It&amp;rsquo;s a pretty interesting language with a lot of design features. Try it if you lack the speed or flexibility of Python. Although Julia has a drawback too: its toolkit is still unstable.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./4.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Swift. They tried to make a universal language out of Swift too, but it never got beyond iOS. And then Kotlin came along, which strongly resembles Swift in syntax, but is suitable for a wider range of tasks and allows you to work with libraries from Java, JavaScript and C.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./5.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Java. Java is a cool language that is often unfairly berated. It was created for Enterprise, so there&amp;rsquo;s an overextended &amp;ldquo;ceremony&amp;rdquo; there: you have to write a lot of extra code to build a simple application. Yes, this simplifies support and improves stability of the application, but it makes the programming process much more complicated.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./6.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kotlin. Kotlin has all the advantages of Java but relieves the programmer of a good half of the &amp;ldquo;ceremonies&amp;rdquo;, and therefore has great promise.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./7.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
