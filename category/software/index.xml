<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software | Academic</title>
    <link>https://example.com/category/software/</link>
      <atom:link href="https://example.com/category/software/index.xml" rel="self" type="application/rss+xml" />
    <description>Software</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 13 May 2023 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Software</title>
      <link>https://example.com/category/software/</link>
    </image>
    
    <item>
      <title>Languages of scientific programming</title>
      <link>https://example.com/post/languages-of-scientific-programming/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/languages-of-scientific-programming/</guid>
      <description>&lt;h2 id=&#34;main-scientific-programming-languages&#34;&gt;Main scientific programming languages&lt;/h2&gt;
&lt;p&gt;Usually scientists write computational code in C++, and then turn it into Python code. This approach is outdated: it is very difficult to maintain a large code base in Python, and here the size of projects grows on the side of code users - scientists. That is why such systems are falling apart, and for the last five years engineers and scientists have been looking for more flexible and simpler alternatives.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;other-scientific-programming-languages&#34;&gt;Other scientific programming languages&lt;/h2&gt;
&lt;p&gt;In addition to Python, various fields of science write or have tried to write in other languages.&lt;/p&gt;
&lt;p&gt;R. It is used in statistics. It&amp;rsquo;s a highly specialized language that&amp;rsquo;s great for statistical problems. But often we not only need to get the data but we need to make a web service so that the user has access to this data. Writing it in R is not an easy task.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Julia. It&amp;rsquo;s a pretty interesting language with a lot of design features. Try it if you lack the speed or flexibility of Python. Although Julia has a drawback too: its toolkit is still unstable.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./4.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Swift. They tried to make a universal language out of Swift too, but it never got beyond iOS. And then Kotlin came along, which strongly resembles Swift in syntax, but is suitable for a wider range of tasks and allows you to work with libraries from Java, JavaScript and C.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./5.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Java. Java is a cool language that is often unfairly berated. It was created for Enterprise, so there&amp;rsquo;s an overextended &amp;ldquo;ceremony&amp;rdquo; there: you have to write a lot of extra code to build a simple application. Yes, this simplifies support and improves stability of the application, but it makes the programming process much more complicated.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./6.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Kotlin. Kotlin has all the advantages of Java but relieves the programmer of a good half of the &amp;ldquo;ceremonies&amp;rdquo;, and therefore has great promise.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./7.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Report</title>
      <link>https://example.com/post/otchet/</link>
      <pubDate>Wed, 19 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/otchet/</guid>
      <description>&lt;h2 id=&#34;how-to-make-a-cover-page&#34;&gt;How to make a cover page&lt;/h2&gt;
&lt;p&gt;The title page should state what type of work you are doing and what stage. You should also indicate the discipline in which you are doing the work. At the very end, include your name as the author of the work.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;purpose-of-the-paper-the-assignment-and-a-theoretical-introduction&#34;&gt;Purpose of the paper, the assignment, and a theoretical introduction&lt;/h2&gt;
&lt;p&gt;After the title page, you need to provide all the necessary information about the work. A separate paragraph should specify the purpose of the work. It is also necessary to specify the tasks that will be performed on the course of the work. After all that you need to provide theoretical material that will be needed to understand the work.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;performing-the-lab-work&#34;&gt;Performing the lab work.&lt;/h2&gt;
&lt;p&gt;At this point, you should describe all of the steps of completing the lab work. Describe how you performed this or that task and provide screenshots (pictures/photos). In the text you must specify the links to the screenshots, and the screenshots must be signed.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion.&lt;/h2&gt;
&lt;p&gt;At the end you should make a conclusion about the work done. It should say what was done, what results were obtained and what new things were learned.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://example.com/post/markdown/</link>
      <pubDate>Sat, 08 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/markdown/</guid>
      <description>&lt;h2 id=&#34;what-is-markdown&#34;&gt;What is Markdown?&lt;/h2&gt;
&lt;p&gt;Markdown is a text markup language created by writer and blogger John Gruber. It is designed to create beautifully formatted text in ordinary TXT files. You don&amp;rsquo;t need a cumbersome word processor like Word or Pages to create documents with bold or italic type, quotes, links, and even tables. All you need to do is memorize the simple rules of Markdown and you can even write in Notepad. Using a dedicated Markdown editor is a great advantage, of course.&lt;/p&gt;
&lt;h2 id=&#34;markdown-advantages&#34;&gt;Markdown advantages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Universality&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Documents written using the Markdown syntax are plain TXT files. They can be opened on any platform and in any editor. This makes them different from text processor files. Ever tried opening an Apple Pages document in Word?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Markdown is so easy that even people who haven&amp;rsquo;t heard of Latex and HTML can learn it in 10 minutes. Grids for subheadings, asterisks for highlighting, dashes for lists. It couldn&amp;rsquo;t be easier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Large selection of tools&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many, many editors for working with Markdown documents. There are online, mobile, and desktop tools. There&amp;rsquo;s the monster Atom, the beautiful and minimalistic ghostwriter and iA Writer, Vim for geeks and Ulysses for professional writers. Take your pick.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convertibility&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Markdown documents can be easily exported in any format such as PDF, DOC and ODT. The formatting is always the same.&lt;/p&gt;
&lt;h2 id=&#34;disadvantages-of-markdown&#34;&gt;Disadvantages of Markdown&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Limited formatting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because Markdown documents are just text files, you can&amp;rsquo;t use fonts to beautify them. It is, after all, more of a drafting tool than a full-fledged typesetting tool.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Strict rules&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Markdown defines text as appearing in special characters. One extra * or #, and the formatting changes. So you have to be careful when you type in Markdown.&lt;/p&gt;
&lt;h2 id=&#34;basic-syntax&#34;&gt;Basic syntax&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Markdown texts are formed using special characters either before or after words and phrases. The following are the most basic rules which will work in all Markdown authors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Headings&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Headings in Markdown are incredibly easy to use. All you need to remember is the #, aka hash, symbol. The header level is determined by the number of grids in it, and there can be six in total. It looks like this:&lt;/p&gt;
&lt;p&gt;&amp;lsquo;## Header H1&amp;rsquo;.&lt;/p&gt;
&lt;h2 id=&#34;header-h2&#34;&gt;Header H2&#39;.&lt;/h2&gt;
&lt;p&gt;&amp;lsquo;### Header H3&amp;rsquo;.
&amp;lsquo;#### Header H4&amp;rsquo;
&amp;lsquo;##### Header H5&amp;rsquo;
&amp;lsquo;###### Header H6&amp;rsquo;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to headings, Markdown also supports simple text formatting. It can be italicized or bolded with asterisks and underscores:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Italic* and _Cursive
&lt;strong&gt;Bold text&lt;/strong&gt; and _Bold text
&lt;em&gt;&lt;strong&gt;Bold and italic text&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quotes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes a paragraph needs to be highlighted as a quote. In this case, use the &amp;gt; sign. It must be placed before each line of the quote.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bold text&lt;/strong&gt; and _Bold text
&lt;strong&gt;Bold text&lt;/strong&gt; and _Bold text
&lt;em&gt;&lt;strong&gt;Bold and italic text&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quotes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes a paragraph needs to be highlighted as a quote. In this case, use the &amp;gt; sign. It must be placed before each line of the quote.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A very profound quote. Please read it carefully.&lt;/p&gt;
&lt;p&gt;Oscar Wilde&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Git versions</title>
      <link>https://example.com/post/git_versions/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/git_versions/</guid>
      <description>&lt;h2 id=&#34;what-is-a-version-control-system&#34;&gt;What is a version control system?&lt;/h2&gt;
&lt;p&gt;Version Control System (VCS) is a software that allows you to track changes in documents, if necessary, roll them back, determine who and when made corrections, etc. The article discusses the types of VCS, the principles of their work, as well as examples of software products. Version control systems can be divided into two groups: distributed and centralized.&lt;/p&gt;
&lt;h2 id=&#34;centralized-version-control-systems&#34;&gt;Centralized version control systems&lt;/h2&gt;
&lt;p&gt;Centralized version control systems are client-server applications when the project repository exists in a single instance and is stored on the server. Access to it was carried out through a special client application. Examples of such software products include CVS, Subversion.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;distributed-version-control-systems&#34;&gt;Distributed version control systems&lt;/h2&gt;
&lt;p&gt;Distributed Version Control Systems (DVCS) allow each developer working with the system to keep a copy of the repository. In this case it is possible to allocate a central repository (conventionally), to which changes from local repositories will be sent, and with it, these local repositories will be synchronized. With such a system, users periodically synchronize their local repositories with the central repository, and work directly with their local copy. Once enough changes have been made to the local copy, they (the changes) are sent to the server. The server is usually chosen conventionally since in most DVCS there is no such a thing as a &amp;ldquo;dedicated server with central repository&amp;rdquo;. The big advantage of this approach is developer autonomy when working on the project, the flexibility of the overall system and increased reliability due to the fact that each developer has a local copy of the central repository. Two of the best known DVCSs are Git and Mercurial.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Git is a distributed version control system developed by Linus Torvalds to work on the Linux operating system kernel. Major projects that use git include the Linux kernel, Qt, and Android. Git is free and distributed under the GNU GPL 2 license and, like Mercurial, is available on almost all operating systems. Its basic features are similar to Mercurial (and other DVCS), but thanks to some advantages (high speed, ability to integrate with other VCS, user-friendly interface) and a very active community that has been formed around the system, git became a leader in distributed version control systems. It should be noted that despite the great popularity of systems like git, large corporations like Google use their own VCS.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
